/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pscheduler;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.time.SimpleTimePeriod;

/**
 *
 * @author SAGAR
 */
public class SJF extends javax.swing.JInternalFrame {

    /**
     * Creates new form SJF
     */
    int tq,t,i,count=0,rtwt=0,rttat=0,temp,sq=0,stwt=0,sttat=0;
    int result[] = new int[20];
   
    double sawt = 0.0;
    double satat=0.0;
      TaskSeriesCollection dataset;
      int tbt=0;
    
     class process {
	int name;
	int at;
	int burst;
	int wait;
	int tat;
	int remaining;
	};
   process p[] = new process[20];
   
    


    public SJF() {
        initComponents();
        
    }
    public double calc(int n,int a1[],int b1[],int p1[]){
        
        int temp = 0;
        for(i=0;i<n;i++)
            p[i] = new process();
        int j=0,no=0,k,min;
	for(i=0;i<n;i++)
	{
		p[i].remaining = p[i].burst = b1[i];
		tbt+=p[i].burst;
                p[i].at = a1[i];
	}
        
	for(i=0;i<tbt;i++)
	{
		min=999;
		for(j=0;j<n;j++)
		{
			if(p[j].at<=i && p[j].remaining > 0)
			{
				if(p[j].remaining<min)
				{
					min = p[j].remaining;
					no = j;
				}
			}
		}
		result[temp++] = no;
		p[no].remaining--;
		
		for(k=0;k<n;k++)
			if(p[k].at<=i && p[k].remaining >0 && k !=no)
				p[k].wait++;
	}
		
	
	for(k=0;k<n;k++)
		p[k].tat = p[k].burst + p[k].wait;
	
	for(k=0;k<n;k++)
	{
		stwt += p[k].wait;
		sttat += p[k].tat;
		
	}
	sawt = (float) stwt/n;
	satat = (float) sttat/n;
        
        JTextArea jt = new JTextArea("Process\t Arrival \t Burst\t Priority\t Wait\t TurnAround");
        for(i=0;i<n;i++)
        {
            jt.setText(jt.getText() + "\n"+i + "\t" + p[i].at+"\t"+p[i].burst+"\t"+p1[i]+"\t"+p[i].wait+"\t"+p[i].tat);
            
        }
        jt.setText(jt.getText() + "\n\n"+"The Average Waiting Time is "+sawt);
        jt.setText(jt.getText() + "\n\n"+"The Average Turn Around Time is "+satat);
        jt.setBounds(20, 100, 530, 150);
        jt.setEnabled(false);
        jDesktopPane1.add(jt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        return sawt;
        
    }
    
    public void draw(int n,int a[],int b[],int p[])
    {
               
        dataset = new TaskSeriesCollection();
        TaskSeries s[] = new TaskSeries[50];
        TaskSeries s1 = new TaskSeries("Planned Tasks");
        int temp=0;
        int y[] = new int[30];
        for(int z = 0 ; z< 10 ; z++)
            y[z] = 1;
        for(int k=0;k<tbt;k++)
        {             
                s[k] = new TaskSeries("p"+result[k]+"("+y[result[k]] +")");
                s[k].add(new Task("p"+result[k]+"("+y[result[k]] +")",new SimpleTimePeriod(temp, temp+1)));
                temp = temp+1;
                y[result[k]]++;
                
        
        //temp+=b[result[k]];
        }      
        for(int k=0;k<tbt;k++)
        dataset.add(s[k]);
        JFreeChart chart =  ChartFactory.createGanttChart("Time Chart", "Processes", "Avg Waiting Time", dataset);
        CategoryPlot p1 = chart.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.MAGENTA);
        ChartFrame frame = new ChartFrame("Process", chart);
        frame.setVisible(true);
        frame.setSize(600, 600);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setBackground(new java.awt.Color(255, 0, 0));
        jLabel1.setFont(new java.awt.Font("Old English Text MT", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SJF");
        jLabel1.setBounds(220, 20, 150, 40);
        jDesktopPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
